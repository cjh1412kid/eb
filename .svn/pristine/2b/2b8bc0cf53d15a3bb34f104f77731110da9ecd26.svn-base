package com.nuite.modules.sys.controller;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.alibaba.fastjson.JSONArray;
import com.nuite.common.utils.PageUtils;
import com.nuite.common.utils.R;
import com.nuite.common.validator.ValidatorUtils;
import com.nuite.modules.sys.dao.AreaDao;
import com.nuite.modules.sys.dao.PeriodDao;
import com.nuite.modules.sys.entity.AreaEntity;
import com.nuite.modules.sys.entity.PatchEntity;
import com.nuite.modules.sys.entity.PeriodEntity;
import com.nuite.modules.sys.entity.ShoeEntity;
import com.nuite.modules.sys.entity.UserEntity;
import com.nuite.modules.sys.service.AreaService;
import com.nuite.modules.sys.service.PatchService;
import com.nuite.modules.sys.service.PeriodService;
import com.nuite.modules.sys.service.ShoeService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiParam;


/**
 * 分公司补单表
 * @author yy
 * @date 2019-10-21 10:20:05
 */
@RestController
@RequestMapping("sys/patch")
@Api(tags="分公司补单表接口")
public class PatchController extends AbstractController{
	private Logger logger = LoggerFactory.getLogger(getClass());
	
    @Autowired
    private PatchService patchService;

    @Autowired
    private AreaDao areaDao;
    
    @Autowired
    private PeriodDao periodDao;
    
    @Autowired
    private PeriodService periodService;
    
    @Autowired
    private AreaService areaService;
    
    @Autowired
    private ShoeService shoeService;
    
    /**
     * 列表
     */
    @RequestMapping("/list")
    public R list(@RequestParam Map<String, Object> params){
        PageUtils page = patchService.queryPage(params);
        
        List<PatchEntity> list = (List<PatchEntity>) page.getList();
        for(PatchEntity patchEntity : list) {
        	Integer branchOfficeSeq = patchEntity.getBranchOfficeSeq();
        	AreaEntity branchOffice = areaDao.selectById(branchOfficeSeq);
        	patchEntity.setBranchOfficeName(branchOffice.getAreaName());
        	
        	Integer areaSeq = patchEntity.getAreaSeq();
        	AreaEntity area = areaDao.selectById(areaSeq);
        	patchEntity.setAreaName(area.getAreaName());
        	
        	Integer periodSeq = patchEntity.getPeriodSeq();
        	PeriodEntity periodEntity = periodDao.selectById(periodSeq);
        	patchEntity.setPeriodName(periodEntity.getName());
        	
        	Integer state = patchEntity.getState();
        	if(state == 0) {
        		patchEntity.setStateName("待处理");
        	}
        }
        
        return R.ok().put("page", page);
    }
    
    
    @RequestMapping("/weeks")
    public R weeks(){
    	UserEntity userEntity=getUser();
        //判断当前用户是否为管理员
    	List<Object> weeks=new ArrayList<Object>();
     	if(userEntity.getRoleSeq()==3) {
     		//区域用户
     		Integer areaSeq=userEntity.getUserAreaSeq();
     		weeks=patchService.getWeeks(areaSeq);
     	}else {
     		//全国用户
     		weeks=patchService.getWeeks(null);
     	}
         return R.ok(weeks);
     }
    
    @RequestMapping("/period")
    public R periods(@ApiParam("周次") @RequestParam("week") Integer week){
    	UserEntity userEntity=getUser();
        //判断当前用户是否为管理员
    	List<Object> periods=new ArrayList<Object>();
     	if(userEntity.getRoleSeq()==3) {
     		//区域用户
     		periods=patchService.getPeriods(userEntity.getSeq(),week);
     	}else {
     		//全国用户
     		periods=patchService.getPeriods(null,week);
     	}
     	
     	List<Map<String, Object>> maps=new ArrayList<Map<String,Object>>();
     	for (Object seq : periods) {
     		Map<String, Object> map=new HashMap<String, Object>();
     		PeriodEntity periodEntity=periodService.selectById((Integer)seq);
     		map.put("seq", seq);
     		map.put("name", periodEntity.getName());
     		maps.add(map);
		}
         return R.ok(maps);
     }
    
    @RequestMapping("/patchList")
    public R patchList(@ApiParam("波次") @RequestParam("periodSeq") Integer periodSeq,
			@ApiParam("品类（中文）") @RequestParam("sxValue") String sxValue,
			@ApiParam("周次") @RequestParam("week") Integer week
    		){
    		//获取区域列表
    		UserEntity userEntity=getUser();
    		Integer isAdmin=0;
    		if(userEntity.getRoleSeq()==3) {
    			isAdmin=1;
    		}else {
    			isAdmin=0;
    		}
    		List<Map<String, Object>> areas=new ArrayList<Map<String,Object>>();
    		if(userEntity.getRoleSeq()==3) {
    			Integer areaSeq=userEntity.getUserAreaSeq();
    			AreaEntity areaEntity=areaService.selectById(areaSeq);
    			Map<String, Object> map=new HashMap<String, Object>();
    			map.put("BranchOfficeSeq", areaSeq);
    			map.put("areaName", areaEntity.getAreaName());
    			areas.add(map);
    		}else {
    			areas=patchService.getAreas(periodSeq, sxValue, week);
    			for (Map<String, Object> map : areas) {
					Integer areaSeq=(Integer) map.get("BranchOfficeSeq");
					AreaEntity areaEntity=areaService.selectById(areaSeq);
					map.put("BranchOfficeSeq", areaSeq);
	    			map.put("areaName", areaEntity.getAreaName());
				}
    		}
    		
    		List<Object> ShoeSeqs=new ArrayList<Object>();
    		//根据条件查询货号
    		if(userEntity.getRoleSeq()==3) {
    			ShoeSeqs=patchService.getShoeSeqs(periodSeq, sxValue, week, userEntity.getSeq());
    		}else {
    			ShoeSeqs=patchService.getShoeSeqs(periodSeq, sxValue, week,null);
    		}
    		List<Map<String, Object>> goods=new ArrayList<Map<String,Object>>();
    		if(userEntity.getRoleSeq()==3) {
    			for (Object shoeSeq : ShoeSeqs) {
        			Map<String, Object> map=new HashMap<String, Object>();
        			ShoeEntity shoeEntity=shoeService.selectById((Integer)shoeSeq);
        			map.put("shoeSeq", shoeSeq);
        			map.put("shoeID", shoeEntity.getShoeID());
        			List<PatchEntity> PatchEntitys=new ArrayList<PatchEntity>();
        			List<PatchEntity> patchEntities=patchService.getPatchs(periodSeq, sxValue, week, (Integer)shoeSeq, (Integer)areas.get(0).get("BranchOfficeSeq"));
        			if(patchEntities!=null&&patchEntities.size()>0) {
    					PatchEntitys.add(patchEntities.get(0));
    					if( patchEntities.get(0).getState()==0) {
    						map.put("state", "待处理");
    					}else if( patchEntities.get(0).getState()==1) {
    						map.put("state", "已确认");
    					}else {
    						map.put("state", "已取消");
    					}
    				}else {
    					PatchEntitys.add(new PatchEntity());
    					map.put("state",  "待处理");
    				}
        			map.put("patchNum", PatchEntitys);
        			goods.add(map);
    			}
    		}else {
    			for (Object shoeSeq : ShoeSeqs) {
    			Map<String, Object> map=new HashMap<String, Object>();
    			ShoeEntity shoeEntity=shoeService.selectById((Integer)shoeSeq);
    			map.put("shoeSeq", shoeSeq);
    			map.put("shoeID", shoeEntity.getShoeID());
    			List<PatchEntity> PatchEntitys=new ArrayList<PatchEntity>();
    			for (Map<String, Object> area : areas) {
    				List<PatchEntity> patchEntities=patchService.getPatchs(periodSeq, sxValue, week, (Integer)shoeSeq, (Integer)area.get("BranchOfficeSeq"));
    				if(patchEntities!=null&&patchEntities.size()>0) {
    					PatchEntitys.add(patchEntities.get(0));
    				}else {
    					PatchEntitys.add(new PatchEntity());
    				}
    			}
    			map.put("patchNum", PatchEntitys);
    			goods.add(map);
			}
    		}
        return R.ok().put("area", areas).put("goods", goods).put("admin", isAdmin);
    }


    /**
     * 信息
     */
    @RequestMapping("/info/{seq}")
    public R info(@PathVariable("seq") Integer seq){
        PatchEntity patch = patchService.selectById(seq);

        return R.ok().put("patch", patch);
    }

    /**
     * 保存
     */
    @RequestMapping("/save")
    public R save(@RequestBody PatchEntity patch){
        patchService.insert(patch);

        return R.ok();
    }

    /**
     * 修改
     */
    @RequestMapping("/update")
    public R update(@RequestBody PatchEntity patch){
        ValidatorUtils.validateEntity(patch);
        patchService.updateAllColumnById(patch);//全部更新
        
        return R.ok();
    }

    /**
     * 删除
     */
    @RequestMapping("/delete")
    public R delete(@RequestBody Integer[] seqs){
        patchService.deleteBatchIds(Arrays.asList(seqs));

        return R.ok();
    }
    @PostMapping("updateAll")
    public R updateAll(@RequestBody PatchEntity[] PatchEntitys ) {
    	for (PatchEntity patchEntity : PatchEntitys) {
    		patchEntity.setState(1);
    		patchService.insertOrUpdate(patchEntity);
		}
    	return R.ok();
    }
    
    
	/**
     * 确认提交补单
     */
    @PostMapping("submit")
    public R submit(@ApiParam("年份") @RequestParam("selectPeriodName") String selectPeriodName,
    		@ApiParam("波次") @RequestParam("periodSeq") Integer periodSeq,
			@ApiParam("品类（中文）") @RequestParam("sxValue") String sxValue,
			@ApiParam("开始时间") @RequestParam("startDate") Date startDate,
			@ApiParam("结束时间") @RequestParam("endDate") Date endDate,
			@ApiParam("鞋子seq:货号:补单量") @RequestParam("shoeAndNum") String shoeAndNum,
			HttpServletRequest request) {
    	try {
    		UserEntity loginUser = getUser();
	    	if(loginUser.getRoleSeq() != 3) {
	    		return R.error("只有分公司账号可以提交补单");
	    	}
	    	
	    	Integer branchOfficeSeq = loginUser.getUserAreaSeq();
	    	Integer areaSeq = patchService.getAreaSeqByBranchOfficeSeq(branchOfficeSeq);
    		
    		Integer year = Integer.parseInt(selectPeriodName.substring(0, 4));
    		
    		//获取日期是一年的第几周
    		Calendar calendar = Calendar.getInstance();
    		calendar.setFirstDayOfWeek(Calendar.MONDAY);
    		calendar.setTime(startDate);
    		Integer week = calendar.get(Calendar.WEEK_OF_YEAR);
    		
    		JSONArray shoeAndNumList = JSONArray.parseArray(shoeAndNum);
    		
    		patchService.submit(year, week, startDate, endDate, areaSeq, branchOfficeSeq, loginUser.getSeq(), periodSeq, sxValue, shoeAndNumList);
    		
            return R.ok("提交成功");
    	} catch (Exception e) {
			e.printStackTrace();
			logger.error(e.getMessage(), e);
			return R.error("服务器异常");
		}
    }
    
    

}
