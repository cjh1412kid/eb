package com.nuite.modules.sys.controller;

import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang3.time.DateUtils;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.ss.util.CellRangeAddress;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.nuite.common.exception.RRException;
import com.nuite.common.utils.R;
import com.nuite.modules.sys.entity.AreaEntity;
import com.nuite.modules.sys.entity.GoodsInitialDataEntity;
import com.nuite.modules.sys.entity.PeriodEntity;
import com.nuite.modules.sys.entity.PurchasePlanEntity;
import com.nuite.modules.sys.entity.ShoeEntity;
import com.nuite.modules.sys.entity.ShoeViewEntity;
import com.nuite.modules.sys.entity.SizeAllotTemplateDetailEntity;
import com.nuite.modules.sys.entity.SizeAllotTemplateEntity;
import com.nuite.modules.sys.service.AreaService;
import com.nuite.modules.sys.service.ExcelGoodsService;
import com.nuite.modules.sys.service.GoodsInitialDataService;
import com.nuite.modules.sys.service.PeriodService;
import com.nuite.modules.sys.service.PurchasePlanService;
import com.nuite.modules.sys.service.ShoeService;
import com.nuite.modules.sys.service.SizeAllotTemplateDetailService;
import com.nuite.modules.sys.service.SizeAllotTemplateService;


/**
 * 公告管理
 */
@RestController
@RequestMapping("sys/importData")
public class ImportDataController extends AbstractController {

	@Autowired
	private SizeAllotTemplateService sizeAllotTemplateService;
	
	@Autowired
	private SizeAllotTemplateDetailService sizeAllotTemplateDetailService;
	
	@Autowired
	private ShoeService shoeService;
	
	@Autowired
	private ExcelGoodsService excelGoodsService;
	
	@Autowired
	private GoodsInitialDataService goodsInitialDataService;
	
	@Autowired
	private AreaService areaService;
	
	@Autowired
	private PeriodService periodService;
	
	@Autowired
	private PurchasePlanService purchasePlanService;
	
	@PostMapping("uploadSizeAllotTemplate")
	    public R uploadSizeAllotTemplate(MultipartFile goodsExcelFile) {
	        if (goodsExcelFile.isEmpty()) {
	            return R.error("文件不存在！");
	        }
	        try {
//	            ExcelGoodsService excelGoodsService = SpringContextUtils.getBean("qiangrenExcelGoods", ExcelGoodsService.class);
//	            excelGoodsService.importOnlineGoodsExcel(userAreaSeq, goodsExcelFile);
	        	try (InputStream in = goodsExcelFile.getInputStream()) {
	    			Workbook wb = WorkbookFactory.create(in);
	    			// 获取第一个sheet
	    			Sheet sheet = wb.getSheetAt(0);
	    			// 获取最大行数
	    			int rownum = sheet.getPhysicalNumberOfRows();
	    			// 获取第一行
	    			Row row = sheet.getRow(0);
	    			// 存放表中的数据
	    			// 循环行
	    			for (int i = 1; i < rownum; i++) {
	    				Row row2 = sheet.getRow(i);
	    				if (row2 != null) {
	    					int cellnum=row2.getPhysicalNumberOfCells();
	    					Cell southCell=row2.getCell(0);
	    					Cell northCell=row2.getCell(1);
	    					Cell totalCell=row2.getCell(cellnum-2);
	    					southCell.setCellType(CellType.STRING);
	    					northCell.setCellType(CellType.STRING);
	    					totalCell.setCellType(CellType.STRING);
	    					String south=southCell.getStringCellValue();
	    					String north=northCell.getStringCellValue();
	    					String totalNum=totalCell.getStringCellValue();
	    					//新增或修改南配码
	    					SizeAllotTemplateEntity southSize=new SizeAllotTemplateEntity();
	    					southSize.setName(south);
	    					southSize.setNbFlag(1);
	    					southSize.setTotalNum(Integer.parseInt(totalNum));
	    					southSize=sizeAllotTemplateService.insertOrUpdateOne(southSize);
	    					//新增或修改北配码
	    					SizeAllotTemplateEntity northSize=new SizeAllotTemplateEntity();
	    					northSize.setName(north);
	    					northSize.setNbFlag(2);
	    					northSize.setTotalNum(Integer.parseInt(totalNum));
	    					northSize=sizeAllotTemplateService.insertOrUpdateOne(northSize);
	    					
	    					
	    					for (int j = 2; j < cellnum-3; j++) {
								Cell cell=row2.getCell(j);
								cell.setCellType(CellType.STRING);
								String num=cell.getStringCellValue();
								if(StringUtils.isNotEmpty(num)) {
									 Cell cell2=row.getCell(j);
									 cell2.setCellType(CellType.STRING);
									 String name=cell2.getStringCellValue();
									//新增或修改南配码详情
									 SizeAllotTemplateDetailEntity southDetail=new SizeAllotTemplateDetailEntity();
									 southDetail.setPer(Integer.parseInt(num));
									 southDetail.setSize(name);
									 southDetail.setSizeAllotTemplateSeq(southSize.getSeq());
									 sizeAllotTemplateDetailService.insertOrUpdateOne(southDetail);
									 //新增获取修改北配码详情
									 SizeAllotTemplateDetailEntity northDetail=new SizeAllotTemplateDetailEntity();
									 northDetail.setPer(Integer.parseInt(num));
									 northDetail.setSize(name);
									 northDetail.setSizeAllotTemplateSeq(northSize.getSeq());
									 sizeAllotTemplateDetailService.insertOrUpdateOne(northDetail);
								}
							}
	    				} else {
	    					continue;
	    				}
	    			}
	    		}
	            return R.ok();
	        } catch (RRException e) {
	            return R.error(e.getMsg());
	        } catch (Exception e) {
	            logger.error("解析文件失败", e);
	            return R.error("文件解析失败");
	        }
	    }
	
	
	@PostMapping("uploadGoodsData")
	 public R uploadGoodsData(MultipartFile goodsDataExcelFile) {
	        if (goodsDataExcelFile.isEmpty()) {
	            return R.error("文件不存在！");
	        }
	        try {
	        	try (InputStream in = goodsDataExcelFile.getInputStream()) {
	        		Workbook wb = WorkbookFactory.create(in);
	    			// 获取第一个sheet
	    			Sheet sheet = wb.getSheetAt(0);
	    			// 获取最大行数
	    			int rownum = sheet.getPhysicalNumberOfRows();
	    			// 获取第一行
	    			Row row = sheet.getRow(0);
	    			for (int i = 1; i < rownum; i++) {
	    				Row row2 = sheet.getRow(i);
	    				if (row2 != null) {
	    					int cellnum=row2.getPhysicalNumberOfCells();
	    					Cell goodsCell=row2.getCell(0);
	    					goodsCell.setCellType(CellType.STRING);
	    					String goodsId=goodsCell.getStringCellValue();
	    					//合计
	    					Cell totalCell=row2.getCell(1);
	    					totalCell.setCellType(CellType.STRING);
	    					String totalNum=totalCell.getStringCellValue();
	    					//根据goodsId 查询period
	    					ShoeEntity shoeEntity=shoeService.selectByGoodId(goodsId);
	    					if(shoeEntity!=null) {
	    						Integer periodSeq=shoeEntity.getPeriodSeq();
	    						ShoeViewEntity shoeViewEntity=excelGoodsService.getShoeViewEntity(goodsId);
	    						String SXValue=shoeViewEntity.getSX1Value();
	    						//根据货号，波次，区域序号0,品类 修改或添加首单
	    						GoodsInitialDataEntity goodsInitialDataEntity=new GoodsInitialDataEntity();
	    						goodsInitialDataEntity.setAreaSeq(0);
	    						goodsInitialDataEntity.setBranchOfficeSeq(0);
	    						goodsInitialDataEntity.setFirstOrderNum(Integer.parseInt(totalNum));
	    						goodsInitialDataEntity.setPeriodSeq(periodSeq);
	    						goodsInitialDataEntity.setShoeID(goodsId);
	    						goodsInitialDataEntity.setShoeSeq(shoeEntity.getSeq());
	    						goodsInitialDataEntity.setSxValue(SXValue);
	    						goodsInitialDataEntity.setUpdateTime(new Date());
	    						goodsInitialDataService.insertOrUpdateOne(goodsInitialDataEntity);
	    						for (int j = 2; j <cellnum; j++) {
									Cell NumCell=row2.getCell(j);
									NumCell.setCellType(CellType.STRING);
									String num=NumCell.getStringCellValue();
									if(StringUtils.isNotEmpty(num)) {
										Cell areaCell=row.getCell(j);
										areaCell.setCellType(CellType.STRING);
										String areaName=areaCell.getStringCellValue()+"办事处";
										//根据areaName获取办事处对象
										AreaEntity areaEntity=areaService.getAreaByName(areaName);
										GoodsInitialDataEntity goodsInitialDataEntity2=new GoodsInitialDataEntity();
										goodsInitialDataEntity2.setAreaSeq(areaEntity.getParentSeq());
										goodsInitialDataEntity2.setBranchOfficeSeq(areaEntity.getSeq());
			    						goodsInitialDataEntity2.setFirstOrderNum(Integer.parseInt(num));
			    						goodsInitialDataEntity2.setPeriodSeq(periodSeq);
			    						goodsInitialDataEntity2.setShoeID(goodsId);
			    						goodsInitialDataEntity2.setShoeSeq(shoeEntity.getSeq());
			    						goodsInitialDataEntity2.setSxValue(SXValue);
			    						goodsInitialDataEntity2.setUpdateTime(new Date());
			    						goodsInitialDataService.insertOrUpdateOne(goodsInitialDataEntity2);
									}
								}
	    					}
	    				}else {
	    					continue;
	    				}
	    			}
	        	}
	        return R.ok();
	        } catch (RRException e) {
	 	            return R.error(e.getMsg());    
	        } catch (Exception e) {
	            logger.error("解析文件失败", e);
	            return R.error("文件解析失败");
	        }
	}
	
	@PostMapping("replenishment")
	 public R replenishment(MultipartFile replenishmentFile) {
	        if (replenishmentFile.isEmpty()) {
	            return R.error("文件不存在！");
	        }
	        try {
	        	try (InputStream in = replenishmentFile.getInputStream()) {
	        		Workbook wb = WorkbookFactory.create(in);
	    			// 获取第一个sheet
	    			Sheet sheet = wb.getSheetAt(0);
	    			// 获取最大行数
	    			int rownum = sheet.getPhysicalNumberOfRows();
	    			// 获取第一行
	    			Row row = sheet.getRow(0);
	    			for (int i = 1; i < rownum; i++) {
	    				Row row2 = sheet.getRow(i);
	    				if (row2 != null) {
	    					int cellnum=row2.getPhysicalNumberOfCells();
	    					Cell goodsCell=row2.getCell(0);
	    					goodsCell.setCellType(CellType.STRING);
	    					String goodsId=goodsCell.getStringCellValue();
	    					//预留
	    					Cell reserveCell=row2.getCell(1);
	    					reserveCell.setCellType(CellType.STRING);
	    					String reserveNum=reserveCell.getStringCellValue();
	    					//合计
	    					Cell totalCell=row2.getCell(2);
	    					totalCell.setCellType(CellType.STRING);
	    					String totalNum=totalCell.getStringCellValue();
	    					//根据goodsId 查询period
	    					ShoeEntity shoeEntity=shoeService.selectByGoodId(goodsId);
	    					if(shoeEntity!=null) {
	    						Integer periodSeq=shoeEntity.getPeriodSeq();
	    						ShoeViewEntity shoeViewEntity=excelGoodsService.getShoeViewEntity(goodsId);
	    						String SXValue=shoeViewEntity.getSX1Value();
	    						//根据货号，波次，区域序号0,品类 修改或添加首单
	    						GoodsInitialDataEntity goodsInitialDataEntity=new GoodsInitialDataEntity();
	    						goodsInitialDataEntity.setAreaSeq(0);
	    						goodsInitialDataEntity.setBranchOfficeSeq(0);
	    						goodsInitialDataEntity.setPeriodSeq(periodSeq);
	    						goodsInitialDataEntity.setShoeID(goodsId);
	    						goodsInitialDataEntity.setShoeSeq(shoeEntity.getSeq());
	    						goodsInitialDataEntity.setSxValue(SXValue);
	    						goodsInitialDataEntity.setUpdateTime(new Date());
	    						goodsInitialDataEntity.setPatchedNum(Integer.parseInt(totalNum));
	    						if(StringUtils.isNumeric(reserveNum)&&!StringUtils.equals("", reserveNum)) {
	    							goodsInitialDataEntity.setReserveNum(Integer.parseInt(reserveNum));
	    						}
	    						goodsInitialDataService.insertOrUpdateOne(goodsInitialDataEntity);
	    						for (int j = 3; j <cellnum; j++) {
									Cell NumCell=row2.getCell(j);
									NumCell.setCellType(CellType.STRING);
									String num=NumCell.getStringCellValue();
									if(StringUtils.isNotEmpty(num)) {
										Cell areaCell=row.getCell(j);
										areaCell.setCellType(CellType.STRING);
										String areaName=areaCell.getStringCellValue()+"办事处";
										//根据areaName获取办事处对象
										AreaEntity areaEntity=areaService.getAreaByName(areaName);
										GoodsInitialDataEntity goodsInitialDataEntity2=new GoodsInitialDataEntity();
										goodsInitialDataEntity2.setAreaSeq(areaEntity.getParentSeq());
										goodsInitialDataEntity2.setBranchOfficeSeq(areaEntity.getSeq());
			    						goodsInitialDataEntity2.setPeriodSeq(periodSeq);
			    						goodsInitialDataEntity2.setShoeID(goodsId);
			    						goodsInitialDataEntity2.setShoeSeq(shoeEntity.getSeq());
			    						goodsInitialDataEntity2.setSxValue(SXValue);
			    						goodsInitialDataEntity2.setPatchedNum(Integer.parseInt(num));
			    						goodsInitialDataEntity2.setUpdateTime(new Date());
			    						goodsInitialDataService.insertOrUpdateOne(goodsInitialDataEntity2);
									}
								}
	    					}
	    				}else {
	    					continue;
	    				}
	    			}
	        	}
	        return R.ok();
	        } catch (RRException e) {
	 	            return R.error(e.getMsg());    
	        } catch (Exception e) {
	            logger.error("解析文件失败", e);
	            return R.error("文件解析失败");
	        }
	}
	@PostMapping("purchasePlan")
	 public R purchasePlan(MultipartFile purchasePlanFile) {
		  if (purchasePlanFile.isEmpty()) {
	            return R.error("文件不存在！");
	        }
	        try {
	        	try (InputStream in = purchasePlanFile.getInputStream()) {
	        		Workbook wb = WorkbookFactory.create(in);
	    			// 获取第一个sheet
	    			Sheet sheet = wb.getSheetAt(0);
	    			//时间行
	    			Row timeRow=sheet.getRow(1);
	    			
	    			int rownum = sheet.getPhysicalNumberOfRows();
	    			
	    			for (int i = 6; i< rownum; i++) {
	    				Row row2 = sheet.getRow(i);
	    				if (row2 != null) {
	    					int cellnum=row2.getPhysicalNumberOfCells();
	    					//波次
	    					Cell periodCell=row2.getCell(1);
	    				    boolean isMerge = isMergedRegion(sheet, i, periodCell.getColumnIndex());  
	    					periodCell.setCellType(CellType.STRING);
	    					String periodName=periodCell.getStringCellValue();
	    					if(isMerge) {  
	    						periodName = getMergedRegionValue(sheet, row2.getRowNum(), periodCell.getColumnIndex());  
	    	                }
	    					//品类
	    					Cell sxValueCell=row2.getCell(2);
	    					sxValueCell.setCellType(CellType.STRING);
	    					String sxValueName=sxValueCell.getStringCellValue();
	    					for (int j = 4; j < cellnum; j++) {
								//获取数据
	    						Cell numCell=row2.getCell(j);
	    						numCell.setCellType(CellType.STRING);
		    					String num=numCell.getStringCellValue();
	    						if(StringUtils.isNotBlank(num)) {
	    							//获取年份
	    							Cell timeCell=timeRow.getCell(j);
	    							timeCell.setCellType(CellType.STRING);
	    							String time=timeCell.getStringCellValue();
	    							if(!StringUtils.equals("小计", time)) {
	    								Calendar cal = new GregorianCalendar(1900,0,-1);
	    								Date date= DateUtils.addDays(cal.getTime(), Integer.parseInt(time));
	    								cal.setTime(date);
	    								Integer year=cal.get(Calendar.YEAR);
	    								String	period=year+periodName;
	    								//根据波次名称查询序号
	    								PeriodEntity periodEntity=periodService.getPeriodEntityByName(period);
	    								PurchasePlanEntity purchasePlanEntity=new PurchasePlanEntity();
	    								purchasePlanEntity.setPeriodSeq(periodEntity.getSeq());
	    								purchasePlanEntity.setPlanDate(cal.getTime());
	    								purchasePlanEntity.setPlanNum((int)(Double.parseDouble(num)*1000));
	    								purchasePlanEntity.setSxValue(sxValueName);
	    								purchasePlanEntity.setYear(year);
	    								purchasePlanService.insertOrUpdateOne(purchasePlanEntity);
	    							}
	    						}
							}
	    				}else {
	    					continue;
	    				}
	    			}
	    		}
	        	return R.ok();
	        } catch (RRException e) {
 	            return R.error(e.getMsg());    
        } catch (Exception e) {
            logger.error("解析文件失败", e);
            return R.error("文件解析失败");
        }
	}
    private String getMergedRegionValue(Sheet sheet, int rowNum, int columnIndex) {
    	 int sheetMergeCount = sheet.getNumMergedRegions();    
         
         for(int i = 0 ; i < sheetMergeCount ; i++){    
             CellRangeAddress ca = sheet.getMergedRegion(i);    
             int firstColumn = ca.getFirstColumn();    
             int lastColumn = ca.getLastColumn();    
             int firstRow = ca.getFirstRow();    
             int lastRow = ca.getLastRow();    
                 
             if(rowNum >= firstRow && rowNum <= lastRow){    
                     
                 if(columnIndex >= firstColumn && columnIndex <= lastColumn){    
                     Row fRow = sheet.getRow(firstRow);    
                     Cell fCell = fRow.getCell(firstColumn);    
                     return getCellValue(fCell) ;    
                 }    
             }    
         }    
             
         return null ;    
	}


	private String getCellValue(Cell cell) {
		 if(cell == null) return "";    
         
	        if(cell.getCellType() == Cell.CELL_TYPE_STRING){    
	                
	            return cell.getStringCellValue();    
	                
	        }else if(cell.getCellType() == Cell.CELL_TYPE_BOOLEAN){    
	                
	            return String.valueOf(cell.getBooleanCellValue());    
	                
	        }else if(cell.getCellType() == Cell.CELL_TYPE_FORMULA){    
	                
	            return cell.getCellFormula() ;    
	                
	        }else if(cell.getCellType() == Cell.CELL_TYPE_NUMERIC){    
	                
	            return String.valueOf(cell.getNumericCellValue());    
	                
	        }    
	        return "";    
	}


	private boolean isMergedRegion(Sheet sheet, int row, int column) {
    	  int sheetMergeCount = sheet.getNumMergedRegions();  
          for (int i = 0; i < sheetMergeCount; i++) {  
            CellRangeAddress range = sheet.getMergedRegion(i);  
            int firstColumn = range.getFirstColumn();  
            int lastColumn = range.getLastColumn();  
            int firstRow = range.getFirstRow();  
            int lastRow = range.getLastRow();  
            if(row >= firstRow && row <= lastRow){  
                if(column >= firstColumn && column <= lastColumn){  
                    return true;  
                }  
            }  
          }  
          return false;
	}

}
