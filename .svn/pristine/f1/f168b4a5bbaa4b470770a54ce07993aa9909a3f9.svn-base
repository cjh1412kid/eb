package com.nuite.modules.sys.controller;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.nuite.common.utils.R;
import com.nuite.modules.sys.entity.DeadlineRaiseRateEntity;
import com.nuite.modules.sys.service.DeadlineRaiseRateService;
import com.nuite.modules.sys.service.PeriodService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;



/**
 * 基础信息查询（区域、门店、波次）
 * @author yy
 * @date 2018-11-27 15:12:43
 */
@RestController
@RequestMapping("/sys/baseInfo")
@Api(tags="基础信息查询（区域、门店、波次）")
public class AreaShopPeriodController extends AbstractController{
	private Logger logger = LoggerFactory.getLogger(getClass());
    @Autowired
    private PeriodService periodService;
    
    @Autowired
    private DeadlineRaiseRateService deadlineRaiseRateService;
    
 
    
    
    /**
     * 获取补单可选择的波次
     */
    @GetMapping("periods")
    @ApiOperation("获取补单可选择的波次")
    public R periods() {
    	try {
    		//获取今年的补单配置
    		DeadlineRaiseRateEntity deadlineRaiseRateEntity = deadlineRaiseRateService.getThisYearSetting();
    		if(deadlineRaiseRateEntity == null){
    			return R.error("请先完成今年的补单配置！");
    		}
    		Date nowDate = new Date();
    		Calendar cal = Calendar.getInstance();
    		List<String> season = new ArrayList<String>();
    		
			if (!nowDate.after(deadlineRaiseRateEntity.getSpringDeep()) || !nowDate.after(deadlineRaiseRateEntity.getSpringShallow()) ) {
				season.add(cal.get(Calendar.YEAR) + "春季");
			}
			if (!nowDate.after(deadlineRaiseRateEntity.getHalfCold()) || !nowDate.after(deadlineRaiseRateEntity.getFullCold()) ) {
				season.add(cal.get(Calendar.YEAR) + "夏季");
			}
			if (!nowDate.after(deadlineRaiseRateEntity.getAutumnShallow()) || !nowDate.after(deadlineRaiseRateEntity.getAutumnDeep()) ) {
				season.add(cal.get(Calendar.YEAR) + "秋季");
			}
			if (!nowDate.after(deadlineRaiseRateEntity.getSingleBoot()) || !nowDate.after(deadlineRaiseRateEntity.getTwoCotton()) || !nowDate.after(deadlineRaiseRateEntity.getBigCotton()) ) {
				season.add(cal.get(Calendar.YEAR) + "冬季");
			}
			
    		List<Map<String, Object>> periodList = periodService.getPeriodsByBrandSeq(1,season);

    		return R.ok(periodList);
    	} catch (Exception e) {
    		e.printStackTrace();
    		logger.error(e.getMessage(), e);
    		return R.error("服务器开小差了");
    	}
    	
    }
    
    
    
    
    /**
     * 获取补单可选择的品类（根据已选择的波次名称）
     */
    @GetMapping("categorys")
    @ApiOperation("获取补单可选择的品类")
    public R categorys(@ApiParam("波次名称") @RequestParam("periodName") String periodName) {
    	try {
    		//获取今年的补单配置
    		DeadlineRaiseRateEntity deadlineRaiseRateEntity = deadlineRaiseRateService.getThisYearSetting();
    		
    		Date nowDate = new Date();
    		List<String> categorys = new ArrayList<String>();
    		
    		if(periodName.indexOf("春季") != -1){
				if (!nowDate.after(deadlineRaiseRateEntity.getSpringDeep())) {
					categorys.add("春深");
				}
				if (!nowDate.after(deadlineRaiseRateEntity.getSpringShallow()) ) {
					categorys.add("春浅");
				}
    		} else if (periodName.indexOf("夏季") != -1) {
				if (!nowDate.after(deadlineRaiseRateEntity.getHalfCold())) {
					categorys.add("半凉");
				}
				if (!nowDate.after(deadlineRaiseRateEntity.getFullCold()) ) {
					categorys.add("全凉");
				}
    		} else if (periodName.indexOf("秋季") != -1) {
				if (!nowDate.after(deadlineRaiseRateEntity.getAutumnShallow())) {
					categorys.add("秋浅");
				}
				if (!nowDate.after(deadlineRaiseRateEntity.getAutumnDeep()) ) {
					categorys.add("秋深");
				}
    		} else if (periodName.indexOf("冬季") != -1) {
				if (!nowDate.after(deadlineRaiseRateEntity.getSingleBoot())) {
					categorys.add("单靴");
				}
				if (!nowDate.after(deadlineRaiseRateEntity.getTwoCotton())) {
					categorys.add("二棉");
				}
				if (!nowDate.after(deadlineRaiseRateEntity.getBigCotton()) ) {
					categorys.add("大棉");
				}
    		}
    		
    		return R.ok(categorys);
    	} catch (Exception e) {
    		e.printStackTrace();
    		logger.error(e.getMessage(), e);
    		return R.error("服务器开小差了");
    	}
    	
    }
    
    
    
    
}
