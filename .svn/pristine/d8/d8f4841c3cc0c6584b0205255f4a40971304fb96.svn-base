package com.nuite.modules.sys.controller;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.nuite.common.utils.R;
import com.nuite.modules.sys.service.PeriodService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;



/**
 * 基础信息查询（区域、门店、波次）
 * @author yy
 * @date 2018-11-27 15:12:43
 */
@RestController
@RequestMapping("/sys/baseInfo")
@Api(tags="基础信息查询（区域、门店、波次）")
public class AreaShopPeriodController extends AbstractController{
	private Logger logger = LoggerFactory.getLogger(getClass());
    @Autowired
    private PeriodService periodService;
    
    
    
 
    
    
    /**
     * 获取所有波次
     */
    @GetMapping("periods")
    @ApiOperation("获取所有波次")
    public R periods() {
    	try {
    		Date date=new Date();
    		Calendar cal=Calendar.getInstance();
    		cal.set(cal.get(Calendar.YEAR), 2, 31);
    		Date springDate=cal.getTime();
    		cal.set(cal.get(Calendar.YEAR), 5, 30);
    		Date summerDate=cal.getTime();
    		cal.set(cal.get(Calendar.YEAR), 8, 30);
    		Date autumnDate=cal.getTime();
    		cal.set(cal.get(Calendar.YEAR), 11, 31);
    		Date winterDate=cal.getTime();
    		List<String> season=new ArrayList<String>();
    		if(date.getTime()<springDate.getTime()) {
    			season.add(cal.get(Calendar.YEAR)+"春季");
    			season.add(cal.get(Calendar.YEAR)+"夏季");
    			season.add(cal.get(Calendar.YEAR)+"秋季");
    			season.add(cal.get(Calendar.YEAR)+"冬季");
    		}else if(date.getTime()<summerDate.getTime()) {
    			season.add(cal.get(Calendar.YEAR)+"夏季");
    			season.add(cal.get(Calendar.YEAR)+"秋季");
    			season.add(cal.get(Calendar.YEAR)+"冬季");
    		}else if(date.getTime()<autumnDate.getTime()) {
    			season.add(cal.get(Calendar.YEAR)+"秋季");
    			season.add(cal.get(Calendar.YEAR)+"冬季");
    		}else if(date.getTime()<winterDate.getTime()) {
    			season.add(cal.get(Calendar.YEAR)+"冬季");
    		}
    		List<Map<String, Object>> periodList = periodService.getPeriodsByBrandSeq(1,season);

    		return R.ok(periodList);
    	} catch (Exception e) {
    		e.printStackTrace();
    		logger.error(e.getMessage(), e);
    		return R.error("服务器开小差了");
    	}
    	
    }
    
}
